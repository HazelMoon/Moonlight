@page "/community"

@using Moonlight.App.Repositories
@using Moonlight.App.Database.Entities.Community
@using Microsoft.EntityFrameworkCore
@using Moonlight.App.Database.Enums
@using Moonlight.App.Models.Enums
@using Moonlight.App.Services
@using Moonlight.Shared.Components.Community
@using Moonlight.Shared.Components.Modals.Community

@inject Repository<Post> PostRepository
@inject IdentityService IdentityService

<div class="row">
    <div class="col-md-2 col-12 mb-5">
        <CommunityNavigation Index="0"/>

        @if (IdentityService.Permissions[Permission.AdminCommunity])
        {
            <div class="card card-body mt-5">
                <button @onclick="() => CreateModal.Show()" class="btn btn-success">Create new post</button>
            </div>
        }
    </div>
    <div class="col-md-10 col-12">
        <div class="card border-primary mb-5">
            <div class="card-body fs-5">
                These announcements provide you with the latest news and information.
                The posts here have been created by an admin and can contain valuable information
                so consider reading it from time to time
            </div>
        </div>

        <LazyLoader @ref="LazyLoader" Load="Load">
            @foreach (var post in Posts)
            {
                <PostView Post="post" OnUpdate="() => LazyLoader.Reload()"/>
                <div class="mb-10"></div>
            }
        </LazyLoader>
    </div>
</div>

@if (IdentityService.Permissions[Permission.AdminCommunity])
{
    <CreatePostModal @ref="CreateModal" OnUpdate="() => LazyLoader.Reload()" PostType="PostType.Announcement"/>
}

@code
{
    private LazyLoader LazyLoader;
    private CreatePostModal CreateModal;
    private Post[] Posts;

    private Task Load(LazyLoader _)
    {
        Posts = PostRepository
            .Get()
            .Include(x => x.Author)
            .Where(x => x.Type == PostType.Announcement)
            .OrderByDescending(x => x.CreatedAt)
            .ToArray();

        return Task.CompletedTask;
    }
}