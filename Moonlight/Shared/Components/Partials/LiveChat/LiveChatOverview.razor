@using Moonlight.App.Services.Ticketing
@using Moonlight.App.Database.Entities.Tickets
@using Moonlight.App.Repositories
@using Microsoft.EntityFrameworkCore
@using Moonlight.App.Database.Enums
@using Moonlight.App.Services

@inject Repository<Ticket> TicketRepository
@inject IdentityService IdentityService

<div class="card-header">
    <span class="card-title fs-5">Your tickets</span>
    <div class="card-toolbar">
        <button @onclick="() => LiveChatMain.SetViewIndex(0)" class="btn btn-rounded-circle btn-icon">
            <i class="bx bx-sm bx-x"></i>
        </button>
    </div>
</div>
<div class="card-body pt-5">
    <div class="scroll-y me-n5 pe-5" style="height: 50vh; width: 40vh; display: flex; flex-direction: column;">
        <div class="d-flex flex-stack py-2 justify-content-center">
            <h3 class="align-middle text-center">Need help? Create a <a @onclick="() => LiveChatMain.SetViewIndex(3)" @onclick:preventDefault href="#" class="text-primary">ticket</a></h3>
        </div>

        <div class="d-flex flex-stack py-4">
        </div>

        <LazyLoader Load="LoadTickets">
            @if (Tickets.Any())
            {
                foreach (var ticket in Tickets)
                {
                    <a href="#" @onclick="() => LiveChatMain.OpenTicket(ticket)" @onclick:preventDefault class="d-flex flex-stack py-4">
                        <div class="d-flex align-items-center">
                            <div class="symbol symbol-45px symbol-circle">
                                @{
                                    string color = "";

                                    switch (ticket.Priority)
                                    {
                                        case TicketPriority.Critical:
                                            color = "danger";
                                            break;
                                        case TicketPriority.High:
                                            color = "warning";
                                            break;
                                        case TicketPriority.Medium:
                                            color = "primary";
                                            break;
                                        case TicketPriority.Low:
                                            color = "secondary";
                                            break;
                                    }
                                }

                                <span class="symbol-label bg-@(color) text-white fs-6 fw-bolder">@(ticket.Priority.ToString().First())</span>
                            </div>
                            <div class="ms-5">
                                <a href="#" class="fs-5 fw-bold text-gray-900 text-hover-primary mb-2">@(ticket.Name)</a>
                                <div class="fw-semibold text-muted">@(ticket.Description.Length > 100 ? string.Concat(ticket.Description.Take(97)) : ticket.Description)</div>
                            </div>
                        </div>
                        <div class="d-flex flex-column align-items-end ms-2">
                            <span class="text-muted fs-7 mb-1">@(Formatter.FormatAgoFromDateTime(ticket.CreatedAt))</span>
                        </div>
                    </a>
                }
            }
            else
            {
                <div class="text-center text-muted fs-5">No open tickets found</div>
            }
        </LazyLoader>
    </div>
</div>

@code
{
    [CascadingParameter]
    public LiveChatMain LiveChatMain { get; set; }

    private Ticket[] Tickets;

    private Task LoadTickets(LazyLoader _)
    {
        Tickets = TicketRepository
            .Get()
            .Where(x => x.Creator.Id == IdentityService.CurrentUser.Id)
            .Where(x => x.Open)
            .ToArray();

        return Task.CompletedTask;
    }
}