@using Moonlight.App.Services.Ticketing

@implements IDisposable

@inject TicketService TicketService

<div class="card-header">
    <span class="card-title fs-5">@(HasStarted ? TicketService.Chat.Ticket.Name : "Loading")</span>
    <div class="card-toolbar">
        <button @onclick="() => LiveChatMain.SetViewIndex(1)" class="btn btn-rounded-circle btn-icon">
            <i class="bx bx-sm bx-chevron-left"></i>
        </button>
    </div>
</div>
<div class="card-body bg-black py-0">
    <LazyLoader Load="Load">
        <div class="scroll-y me-n5 pe-5" style="height: 50vh; width: 40vh; display: flex; flex-direction: column-reverse;">
            @foreach (var message in TicketService.Chat.Messages.OrderByDescending(x => x.CreatedAt))
            {
                var orientation = message.IsSupport ? "start" : "end";

                @if (message.Sender != null)
                {
                    <div class="d-flex justify-content-@(orientation) mb-10 ">
                        <div class="d-flex flex-column align-items-@(orientation)">
                            <div class="d-flex align-items-center mb-2">
                                <div class="symbol symbol-35px symbol-circle ">
                                    <img alt="Avatar" src="/api/bucket/avatars/@(message.Sender.Avatar)">
                                </div>
                                <div class="ms-3">
                                    <div class="fs-5 fw-bold text-gray-900 me-1">@(message.Sender.Username)</div>
                                    <span class="text-muted fs-7 mb-1">@(Formatter.FormatAgoFromDateTime(message.CreatedAt))</span>
                                </div>
                            </div>
                            <div class="p-5 rounded bg-light-@(message.IsSupport ? "info" : "primary") text-dark fw-semibold mw-lg-400px text-@(orientation)">
                                @(message.Content)
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    @* System msgs here *@
                }
            }
        </div>
    </LazyLoader>
</div>
<div class="card-footer">
    <div class="input-group">
        <input @bind="MyMessageContent" class="form-control" placeholder="Type a message"/>
        <WButton OnClick="SendMessage" Text="Send" CssClasses="btn btn-secondary"></WButton>
    </div>
</div>

@code
{
    [CascadingParameter]
    public LiveChatMain LiveChatMain { get; set; }

    private bool HasStarted = false;
    private string MyMessageContent = "";

    private async Task Load(LazyLoader lazyLoader)
    {
        await lazyLoader.SetText("Starting chat client");

    // Initialize chat service and start it
        TicketService.Chat.OnUpdate = OnUpdate;
        await TicketService.Chat.Start(LiveChatMain.CurrentTicket);

    // Let the ui know that we are ready
        HasStarted = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnUpdate() // This will be called to update the ui. Additional updates and check may be added here
    {
        await InvokeAsync(StateHasChanged);
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrEmpty(MyMessageContent))
            return;

        if (!HasStarted)
            return;

        await TicketService.Chat.SendMessage(MyMessageContent);
        MyMessageContent = "";
        await InvokeAsync(StateHasChanged);
    }

    public async void Dispose()
    {
        await TicketService.Chat.Stop();
    }
}