@using Moonlight.App.Database.Entities.Store

@inject DropzoneService DropzoneService
@inject FileUploadHelper UploadHelper

@implements IDisposable

<div class="dropzone dropzone-queue mb-2" id="@DropzoneId">
    <div class="dropzone-panel mb-lg-0 mb-2">
        <div class="card border border-1 border-primary bg-secondary">
            <div class="card-body">
                <div class="text-center fs-1 fw-bold">
                    Drag a file or folder or <a class="dropzone-select">click to upload files</a>
                </div>
            </div>
            <img src="/svg/upload.svg" class="card-img-bottom" alt="Upload icon" style="max-height: 15vw; pointer-events: none">
        </div>
    </div>
    <div class="dropzone-items wm-200px">
        <div class="dropzone-item" style="display:none">
            <div class="dropzone-file">
                <div class="dropzone-filename" title="some_image_file_name.jpg">
                    <span data-dz-name>some_image_file_name.jpg</span>
                    <strong>(<span data-dz-size>340kb</span>)</strong>
                </div>
                <div class="dropzone-error" data-dz-errormessage></div>
            </div>
            <div class="dropzone-progress">
                <div class="progress">
                    <div
                        class="progress-bar bg-primary"
                        role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0" data-dz-uploadprogress>
                    </div>
                </div>
            </div>
            <div class="dropzone-toolbar">
                <span class="dropzone-delete" data-dz-remove>
                    <i class="bx bx-x fs-1"></i>
                </span>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public string Path { get; set; }
    
    [Parameter]
    public Service Service { get; set; }

    private CancellationTokenSource Cancellation = new();
    private string DropzoneId;

    protected override void OnInitialized()
    {
        DropzoneId = $"dropzone{GetHashCode()}";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var url = await UploadHelper.GenerateUploadUrl(Service, Path);
            await DropzoneService.Create(DropzoneId, url);
            
            Task.Run(async () =>
            {
                while (!Cancellation.IsCancellationRequested)
                {
                    await Task.Delay(TimeSpan.FromMinutes(4));

                    var url = await UploadHelper.GenerateUploadUrl(Service, Path);
                    await DropzoneService.UpdateUrl(DropzoneId, url);
                }
            });
        }
    }

    public void Dispose()
    {
        Cancellation.Cancel();
    }
}